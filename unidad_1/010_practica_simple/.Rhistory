theme_minimal()
summary(df)
set.seed(123)
indices_muestra <- sample(1:5,2,replace = FALSE)
head(df[indices_muestra,])
# Población
poblacion <- df$NA_Sales
# Crear una muestra aleatoria de la población
set.seed(123)
muestra <- sample(poblacion, size = 200, replace = TRUE)
# Calcular frecuencias relativas
breaks <- seq(0, max(poblacion, muestra), by = 0.2)  # intervalos iguales
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/KoMeTa/OneDrive - Universidad Privada del Valle/CODES/EST4/unidad_1/010_practica_simple/archive"  )
data_file <- file.path(data_path, "vgsales.csv")
data.vg.raw <- read.csv(data_file,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year=="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name=="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
head(filter(data.vg, Publisher==" "))
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(data.vg)
print("Con na.omit():")
print(head(df_sin_na))
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
data.vg  <- data.vg[complete.cases(data.vg), ]
dim(data.vg)
summary(data.vg$Global_Sales)
hist(data.vg$Global_Sales)
hist(filter(data.vg,Global_Sales < 5)$Global_Sales)
set.seed(13)
N <- dim(data.vg)[1]
indices_muestra <- sample(1:N,200,replace = TRUE)
data.muestra<-data.vg[indices_muestra, ]
summary(data.muestra$Global_Sales)
df <- filter(data.vg,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Anio",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
summary(df)
set.seed(123)
indices_muestra <- sample(1:5,2,replace = FALSE)
head(df[indices_muestra,])
# Población
poblacion <- df$NA_Sales
# Crear una muestra aleatoria de la población
set.seed(123)
muestra <- sample(poblacion, size = 200, replace = TRUE)
# Calcular frecuencias relativas
breaks <- seq(0, max(poblacion, muestra), by = 0.2)  # intervalos iguales
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/KoMeTa/OneDrive - Universidad Privada del Valle/CODES/EST4/unidad_1/010_practica_simple/archive"  )
data_file <- file.path(data_path, "vgsales.csv")
data.vg.raw <- read.csv(data_file,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year=="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name=="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
head(filter(data.vg, Publisher==" "))
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(data.vg)
print("Con na.omit():")
print(head(df_sin_na))
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
data.vg  <- data.vg[complete.cases(data.vg), ]
dim(data.vg)
summary(data.vg$Global_Sales)
hist(data.vg$Global_Sales)
hist(filter(data.vg,Global_Sales < 5)$Global_Sales)
set.seed(13)
N <- dim(data.vg)[1]
indices_muestra <- sample(1:N,200,replace = TRUE)
data.muestra<-data.vg[indices_muestra, ]
summary(data.muestra$Global_Sales)
df <- filter(data.vg,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Anio",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
summary(df)
set.seed(123)
indices_muestra <- sample(1:5,2,replace = FALSE)
head(df[indices_muestra,])
# Población
poblacion <- df$NA_Sales
# Crear una muestra aleatoria de la población
set.seed(123)
N <- length(poblacion)
tam_muestra <- min(200, N)
muestra <- sample(poblacion, size = tam_muestra, replace = TRUE)
poblacion <- poblacion[!is.na(poblacion) & poblacion >= 0]
muestra <- muestra[!is.na(muestra) & muestra >= 0]
#Si quedaron sin datos, detener con mensaje claro
if(length(poblacion) == 0) stop("Población sin datos válidos en df$NA_Sales.")
if(length(muestra) == 0) stop("Muestra sin datos válidos después del muestreo.")
#--- Definir breaks que cubran TODO el rango (evitando el error) ---
step <- 0.2 # ajusta el ancho de clase si quieres
min_val <- min(poblacion, muestra)
max_val <- max(poblacion, muestra)
#pequeño epsilon para cubrir errores de punto flotante
eps <- .Machine$double.eps * max(abs(min_val), abs(max_val), 1) * 100
#si el rango es menor que step, construir al menos dos cortes
if ((max_val - min_val) < step) {
breaks <- seq(min_val, min_val + step*2, by = step)
} else {
breaks <- seq(min_val, max_val + eps, by = step)
}
#Asegurar al menos 2 breaks
if(length(breaks) < 2) breaks <- pretty(c(min_val, max_val), n = 10)
#Calcular histogramas (sin plot)
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/KoMeTa/OneDrive - Universidad Privada del Valle/CODES/EST4/unidad_1/010_practica_simple/archive"  )
data_file <- file.path(data_path, "vgsales.csv")
data.vg.raw <- read.csv(data_file,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year=="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name=="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
head(filter(data.vg, Publisher==" "))
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(data.vg)
print("Con na.omit():")
print(head(df_sin_na))
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
data.vg  <- data.vg[complete.cases(data.vg), ]
dim(data.vg)
summary(data.vg$Global_Sales)
hist(data.vg$Global_Sales)
hist(filter(data.vg,Global_Sales < 5)$Global_Sales)
set.seed(13)
N <- dim(data.vg)[1]
indices_muestra <- sample(1:N,200,replace = TRUE)
data.muestra<-data.vg[indices_muestra, ]
summary(data.muestra$Global_Sales)
df <- filter(data.vg,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Anio",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
summary(df)
set.seed(123)
indices_muestra <- sample(1:5,2,replace = FALSE)
head(df[indices_muestra,])
# Población
poblacion <- df$NA_Sales
# Crear una muestra aleatoria de la población
set.seed(123)
N <- length(poblacion)
tam_muestra <- min(200, N)
muestra <- sample(poblacion, size = tam_muestra, replace = TRUE)
poblacion <- poblacion[!is.na(poblacion) & poblacion >= 0]
muestra <- muestra[!is.na(muestra) & muestra >= 0]
#Si quedaron sin datos, detener con mensaje claro
if(length(poblacion) == 0) stop("Población sin datos válidos en df$NA_Sales.")
if(length(muestra) == 0) stop("Muestra sin datos válidos después del muestreo.")
#--- Definir breaks que cubran TODO el rango (evitando el error) ---
step <- 0.2 # ajusta el ancho de clase si quieres
min_val <- min(poblacion, muestra)
max_val <- max(poblacion, muestra)
#pequeño epsilon para cubrir errores de punto flotante
eps <- .Machine$double.eps * max(abs(min_val), abs(max_val), 1) * 100
#si el rango es menor que step, construir al menos dos cortes
if ((max_val - min_val) < step) {
breaks <- seq(min_val, min_val + step*2, by = step)
} else {
breaks <- seq(min_val, max_val + eps, by = step)
}
#Asegurar al menos 2 breaks
if(length(breaks) < 2) breaks <- pretty(c(min_val, max_val), n = 10)
#Calcular histogramas (sin plot)
#freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
#freq_muestra <- hist(muestra, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
# Calcular histogramas sin graficar
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/KoMeTa/OneDrive - Universidad Privada del Valle/CODES/EST4/unidad_1/010_practica_simple/archive"  )
data_file <- file.path(data_path, "vgsales.csv")
data.vg.raw <- read.csv(data_file,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year=="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name=="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
head(filter(data.vg, Publisher==" "))
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(data.vg)
print("Con na.omit():")
print(head(df_sin_na))
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
data.vg  <- data.vg[complete.cases(data.vg), ]
dim(data.vg)
summary(data.vg$Global_Sales)
hist(data.vg$Global_Sales)
hist(filter(data.vg,Global_Sales < 5)$Global_Sales)
set.seed(13)
N <- dim(data.vg)[1]
indices_muestra <- sample(1:N,200,replace = TRUE)
data.muestra<-data.vg[indices_muestra, ]
summary(data.muestra$Global_Sales)
df <- filter(data.vg,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Anio",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
summary(df)
set.seed(123)
indices_muestra <- sample(1:5,2,replace = FALSE)
head(df[indices_muestra,])
# Población
poblacion <- df$NA_Sales
# Crear una muestra aleatoria de la población
set.seed(123)
N <- length(poblacion)
tam_muestra <- min(200, N)
muestra <- sample(poblacion, size = tam_muestra, replace = TRUE)
poblacion <- poblacion[!is.na(poblacion) & poblacion >= 0]
muestra <- muestra[!is.na(muestra) & muestra >= 0]
#Si quedaron sin datos, detener con mensaje claro
if(length(poblacion) == 0) stop("Población sin datos válidos en df$NA_Sales.")
if(length(muestra) == 0) stop("Muestra sin datos válidos después del muestreo.")
#--- Definir breaks que cubran TODO el rango (evitando el error) ---
step <- 0.2 # ajusta el ancho de clase si quieres
min_val <- min(poblacion, muestra)
max_val <- max(poblacion, muestra)
#pequeño epsilon para cubrir errores de punto flotante
eps <- .Machine$double.eps * max(abs(min_val), abs(max_val), 1) * 100
#si el rango es menor que step, construir al menos dos cortes
if ((max_val - min_val) < step) {
breaks <- seq(min_val, min_val + step*2, by = step)
} else {
breaks <- seq(min_val, max_val + eps, by = step)
}
#Asegurar al menos 2 breaks
if(length(breaks) < 2) breaks <- pretty(c(min_val, max_val), n = 10)
library(ggplot2)
library(dplyr)
data_path <- file.path("C:/Users/KoMeTa/OneDrive - Universidad Privada del Valle/CODES/EST4/unidad_1/010_practica_simple/archive"  )
data_file <- file.path(data_path, "vgsales.csv")
data.vg.raw <- read.csv(data_file,
stringsAsFactors = F,na.strings = ".",header = T,sep=",")
head(data.vg.raw)
str(data.vg.raw)
summary(data.vg.raw)
data.vg <- data.vg.raw
data.vg$Platform <- factor(data.vg$Platform)
data.vg$Year <- as.numeric(data.vg$Year)
summary(data.vg)
str(data.vg.raw)
unique(data.vg.raw$Year)
head(filter(data.vg.raw, Year=="N/A"))
unique(data.vg$Platform)
filter(data.vg, Name=="FIFA 15")
hist(data.vg$NA_Sales )
# Contar NA por columna
na_por_columna <- colSums(is.na(data.vg))
print("NA por columna:")
print(na_por_columna)
# Porcentaje de NA por columna
porcentaje_na <- colMeans(is.na(data.vg)) * 100
print("Porcentaje de NA por columna:")
print(round(porcentaje_na, 2))
length(unique(data.vg$Publisher))
head(filter(data.vg, Publisher==" "))
# DataFrame de ejemplo con missing values
print("DataFrame original:")
print(head(data.vg))
cat("Filas originales:", nrow(data.vg), "\n\n")
# Método 1: na.omit() - Elimina filas con cualquier NA
df_sin_na <- na.omit(data.vg)
print("Con na.omit():")
print(head(df_sin_na))
cat("Filas después de na.omit():", nrow(df_sin_na), "\n\n")
# Método 2: complete.cases() - Más control
df_completo <- data.vg[complete.cases(data.vg), ]
print("Con complete.cases():")
print(head(df_completo))
cat("Filas después de complete.cases():", nrow(df_completo), "\n")
data.vg  <- data.vg[complete.cases(data.vg), ]
dim(data.vg)
summary(data.vg$Global_Sales)
hist(data.vg$Global_Sales)
hist(filter(data.vg,Global_Sales < 5)$Global_Sales)
set.seed(13)
N <- dim(data.vg)[1]
indices_muestra <- sample(1:N,200,replace = TRUE)
data.muestra<-data.vg[indices_muestra, ]
summary(data.muestra$Global_Sales)
df <- filter(data.vg,NA_Sales<2.5)
# Histograma agrupado por categoría
ggplot( df , aes(x = NA_Sales)) +
geom_histogram(position = "dodge", alpha = 0.7, bins = 20) +
labs(title = "Histograma Agrupado de Ventas por Anio",
x = "Ventas",
y = "Frecuencia") +
theme_minimal()
summary(df)
set.seed(123)
indices_muestra <- sample(1:5,2,replace = FALSE)
head(df[indices_muestra,])
# Población
poblacion <- df$NA_Sales
# Crear una muestra aleatoria de la población
set.seed(123)
N <- length(poblacion)
tam_muestra <- min(200, N)
muestra <- sample(poblacion, size = tam_muestra, replace = TRUE)
poblacion <- poblacion[!is.na(poblacion) & poblacion >= 0]
muestra <- muestra[!is.na(muestra) & muestra >= 0]
#Si quedaron sin datos, detener con mensaje claro
if(length(poblacion) == 0) stop("Población sin datos válidos en df$NA_Sales.")
if(length(muestra) == 0) stop("Muestra sin datos válidos después del muestreo.")
#--- Definir breaks que cubran TODO el rango (evitando el error) ---
step <- 0.2 # ajusta el ancho de clase si quieres
min_val <- min(poblacion, muestra)
max_val <- max(poblacion, muestra)
#pequeño epsilon para cubrir errores de punto flotante
eps <- .Machine$double.eps * max(abs(min_val), abs(max_val), 1) * 100
#si el rango es menor que step, construir al menos dos cortes
if ((max_val - min_val) < step) {
breaks <- seq(min_val, min_val + step*2, by = step)
} else {
breaks <- seq(min_val, max_val + eps, by = step)
}
#Asegurar al menos 2 breaks
if(length(breaks) < 2) breaks <- pretty(c(min_val, max_val), n = 10)
#Calcular histogramas (sin plot)
#freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
#freq_muestra <- hist(muestra, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
# Calcular histogramas sin graficar
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
#Calcular histogramas (sin plot)
#freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
#freq_muestra <- hist(muestra, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
# Calcular histogramas sin graficar
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
#Calcular histogramas (sin plot)
#freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
#freq_muestra <- hist(muestra, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
# Calcular histogramas sin graficar
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = FALSE)
# --- Calcular frecuencias relativas y graficar histograma combinado ---
# Población
poblacion <- df$NA_Sales
# Crear una muestra aleatoria de la población
set.seed(123)
muestra <- sample(poblacion, size = 200, replace = TRUE)
# --- Calcular frecuencias relativas ---
# Extender el rango un poco para cubrir cualquier valor extremo
min_val <- min(c(poblacion, muestra), na.rm = TRUE)
max_val <- max(c(poblacion, muestra), na.rm = TRUE)
# Añadimos un pequeño margen para evitar exclusiones
min_val <- min_val - 1e-6
max_val <- max_val + 1e-6
# Definir breaks (15 clases aproximadamente)
breaks <- seq(min_val, max_val, length.out = 15)
# Calcular histogramas sin graficar
freq_poblacion <- hist(poblacion, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = TRUE)
freq_muestra <- hist(muestra, breaks = breaks, plot = FALSE, include.lowest = TRUE, right = TRUE)
# Calcular frecuencias relativas
rel_freq_poblacion <- freq_poblacion$counts / sum(freq_poblacion$counts)
rel_freq_muestra <- freq_muestra$counts / sum(freq_muestra$counts)
# Crear data frame combinado
df_rel <- data.frame(
Clase = freq_poblacion$mids,
Poblacion = rel_freq_poblacion,
Muestra = rel_freq_muestra
)
# --- Graficar histograma combinado ---
library(ggplot2)
ggplot(df_rel, aes(x = Clase)) +
geom_bar(aes(y = Poblacion, fill = "Población"), stat = "identity", alpha = 0.6, position = "identity") +
geom_bar(aes(y = Muestra, fill = "Muestra"), stat = "identity", alpha = 0.6, position = "dodge") +
scale_fill_manual(values = c("Población" = "steelblue", "Muestra" = "orange")) +
labs(
title = "Comparación de Frecuencias Relativas - Población vs. Muestra",
x = "Ventas en Norteamérica (NA_Sales)",
y = "Frecuencia Relativa",
fill = "Grupo"
) +
theme_minimal()
